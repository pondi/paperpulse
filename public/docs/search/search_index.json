{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Paperpulse Documentation","text":""},{"location":"#overview","title":"Overview","text":"<p>Paperpulse is a comprehensive document management system built with Laravel that automates the processing, organization, and retrieval of receipts and documents. The system leverages OCR and AI technologies to extract structured data from uploaded files, making them searchable and actionable.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Automated Document Processing - Files are automatically processed using OCR and AI to extract meaningful data</li> <li>Smart Receipt Handling - Extracts vendor, amounts, dates, and line items from receipts</li> <li>Full-Text Search - Powered by Meilisearch for instant document discovery</li> <li>WebDAV Support - Upload files directly from any WebDAV-compatible client</li> <li>Multi-format Support - Handles PDFs, images, Word documents, Excel sheets, and more</li> <li>Asynchronous Processing - Background jobs ensure fast uploads and reliable processing</li> <li>Secure Sharing - Generate secure, time-limited links for document sharing</li> </ul>"},{"location":"#architecture","title":"Architecture","text":""},{"location":"#core-components","title":"Core Components","text":"<p>Application Stack - Laravel 11 framework for the backend - Vue.js 3 with Inertia.js for reactive frontend - PostgreSQL/MySQL for data persistence - Redis for caching and queue management - Meilisearch for full-text search capabilities</p> <p>Processing Pipeline 1. Files uploaded via web interface or WebDAV 2. Queued for asynchronous processing 3. OCR extraction for text content 4. AI analysis for structured data 5. Indexing for search 6. Storage in cloud (S3) or local filesystem</p>"},{"location":"#integration-points","title":"Integration Points","text":"<ul> <li>AI Services - OpenAI, Claude, or custom providers for intelligent processing</li> <li>Storage - AWS S3 or compatible object storage</li> <li>WebDAV - Pulsedav server for desktop/mobile client uploads</li> <li>Search - Meilisearch for instant document retrieval</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":""},{"location":"#for-users","title":"For Users","text":"<ul> <li>Getting Started - Installation and initial setup</li> <li>Console Commands - Managing the system via CLI</li> </ul>"},{"location":"#for-administrators","title":"For Administrators","text":"<ul> <li>Pulsedav - WebDAV server configuration and integration</li> </ul>"},{"location":"#for-developers","title":"For Developers","text":"<ul> <li>Developer Guide - Building and extending Paperpulse</li> </ul>"},{"location":"#system-requirements","title":"System Requirements","text":"<ul> <li>PHP 8.2 or higher with required extensions</li> <li>Composer for dependency management</li> <li>Node.js 18+ for frontend builds</li> <li>PostgreSQL 14+ or MySQL 8.0+</li> <li>Redis 6.0+ for queues and caching</li> <li>Meilisearch 1.0+ for search functionality</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Clone the repository and install dependencies</li> <li>Configure your environment variables</li> <li>Run database migrations</li> <li>Start queue workers for background processing</li> <li>Access the application through your web browser</li> </ol> <p>For detailed instructions, see the Getting Started guide.</p>"},{"location":"cli/","title":"Console Commands","text":"<p>Paperpulse provides a comprehensive set of Artisan commands for system management, maintenance, and troubleshooting. All commands support the <code>--help</code> flag for detailed usage information.</p>"},{"location":"cli/#user-management","title":"User Management","text":""},{"location":"cli/#promote-user-to-administrator","title":"Promote User to Administrator","text":"<p>Command: <code>user:promote-admin</code></p> <p>Grants administrative privileges to a regular user account. Administrators can access system settings, manage other users, and perform maintenance tasks.</p> <pre><code>php artisan user:promote-admin user@example.com\n</code></pre>"},{"location":"cli/#remove-administrator-privileges","title":"Remove Administrator Privileges","text":"<p>Command: <code>user:demote-admin</code></p> <p>Revokes administrative privileges, converting an admin back to a regular user.</p> <pre><code>php artisan user:demote-admin admin@example.com\n</code></pre>"},{"location":"cli/#beta-access-management","title":"Beta Access Management","text":""},{"location":"cli/#review-beta-requests","title":"Review Beta Requests","text":"<p>Command: <code>beta:list</code></p> <p>Displays all beta access requests with filtering options. Useful for reviewing who has requested access to the system.</p> <pre><code># Show pending requests\nphp artisan beta:list --pending\n\n# Show approved users\nphp artisan beta:list --invited\n\n# Show rejected requests\nphp artisan beta:list --rejected\n</code></pre>"},{"location":"cli/#process-beta-request","title":"Process Beta Request","text":"<p>Command: <code>beta:approve</code></p> <p>Approves or rejects a beta access request. Approved users receive an invitation email with registration instructions.</p> <pre><code># Approve and send invitation\nphp artisan beta:approve user@example.com\n\n# Approve with specific inviter\nphp artisan beta:approve user@example.com --invited-by=42\n\n# Reject request\nphp artisan beta:approve user@example.com --reject\n</code></pre>"},{"location":"cli/#invitation-system","title":"Invitation System","text":""},{"location":"cli/#view-all-invitations","title":"View All Invitations","text":"<p>Command: <code>invite:list</code></p> <p>Lists all system invitations with their current status (pending, accepted, expired).</p> <pre><code># All invitations\nphp artisan invite:list\n\n# Only pending invitations\nphp artisan invite:list --pending\n</code></pre>"},{"location":"cli/#send-new-invitation","title":"Send New Invitation","text":"<p>Command: <code>invite:send</code></p> <p>Sends a registration invitation to a new user. The invitation includes a secure token valid for a limited time.</p> <pre><code>php artisan invite:send user@example.com --invited-by=42\n</code></pre>"},{"location":"cli/#document-processing","title":"Document Processing","text":""},{"location":"cli/#reprocess-all-files","title":"Reprocess All Files","text":"<p>Command: <code>files:reprocess-all</code></p> <p>Re-runs the processing pipeline for existing files. Useful when updating AI models or fixing processing issues.</p> <pre><code># Preview what would be processed\nphp artisan files:reprocess-all --dry-run\n\n# Process only failed files\nphp artisan files:reprocess-all --failed\n\n# Process specific user's files\nphp artisan files:reprocess-all --user=42 --limit=50\n\n# Process only receipts\nphp artisan files:reprocess-all --type=receipt\n</code></pre> <p>Options: - <code>--type</code>: Filter by file type (receipt, document) - <code>--user</code>: Process files for specific user ID - <code>--limit</code>: Maximum number of files to process (default: 100) - <code>--failed</code>: Only reprocess previously failed files - <code>--dry-run</code>: Preview without making changes</p>"},{"location":"cli/#regenerate-pdf-previews","title":"Regenerate PDF Previews","text":"<p>Command: <code>receipts:regenerate-previews</code></p> <p>Creates new preview images for PDF receipts. These previews are used for quick viewing without downloading the full PDF.</p> <pre><code># Regenerate all previews\nphp artisan receipts:regenerate-previews\n\n# Limit processing and force regeneration\nphp artisan receipts:regenerate-previews --limit=100 --force\n</code></pre>"},{"location":"cli/#retry-failed-processing-jobs","title":"Retry Failed Processing Jobs","text":"<p>Command: <code>receipts:retry-failed</code></p> <p>Retries receipt processing jobs that previously failed due to temporary issues like API timeouts or service unavailability.</p> <pre><code># Retry all failed jobs\nphp artisan receipts:retry-failed --all\n\n# Retry specific job\nphp artisan receipts:retry-failed --job-id=abc-123\n\n# Clear successful jobs from failed queue\nphp artisan receipts:retry-failed --all --clear\n</code></pre>"},{"location":"cli/#data-maintenance","title":"Data Maintenance","text":""},{"location":"cli/#remove-duplicate-receipts","title":"Remove Duplicate Receipts","text":"<p>Command: <code>receipts:cleanup-duplicates</code></p> <p>Identifies and removes duplicate receipt records that may have been created due to processing errors or multiple uploads.</p> <pre><code># Preview duplicates without removing\nphp artisan receipts:cleanup-duplicates --dry-run\n\n# Clean duplicates for specific file\nphp artisan receipts:cleanup-duplicates --file-id=123\n</code></pre>"},{"location":"cli/#clean-expired-shares","title":"Clean Expired Shares","text":"<p>Command: <code>shares:cleanup</code></p> <p>Removes expired file sharing links to maintain database hygiene and ensure security.</p> <pre><code>php artisan shares:cleanup\n</code></pre>"},{"location":"cli/#search-index-management","title":"Search Index Management","text":""},{"location":"cli/#rebuild-receipt-search-index","title":"Rebuild Receipt Search Index","text":"<p>Command: <code>receipts:reindex</code></p> <p>Rebuilds the Meilisearch index for all receipts. Run this after bulk data changes or if search results seem incorrect.</p> <pre><code>php artisan receipts:reindex\n</code></pre>"},{"location":"cli/#rebuild-all-search-indexes","title":"Rebuild All Search Indexes","text":"<p>Command: <code>scout:reindex-all</code></p> <p>Rebuilds search indexes for all searchable models (receipts, documents, etc.).</p> <pre><code># Rebuild existing indexes\nphp artisan scout:reindex-all\n\n# Delete and recreate indexes\nphp artisan scout:reindex-all --fresh\n</code></pre>"},{"location":"cli/#queue-management","title":"Queue Management","text":""},{"location":"cli/#check-queue-health","title":"Check Queue Health","text":"<p>Command: <code>queue:health</code></p> <p>Monitors queue processing status and alerts on issues like stuck jobs or high failure rates.</p> <pre><code># Display health status\nphp artisan queue:health\n\n# Output as JSON for monitoring systems\nphp artisan queue:health --format=json\n\n# Send alert if unhealthy\nphp artisan queue:health --alert\n</code></pre>"},{"location":"cli/#manage-batch-jobs","title":"Manage Batch Jobs","text":"<p>Command: <code>batch:manage</code></p> <p>Controls batch processing operations for bulk file imports and large-scale operations.</p> <pre><code># List all batch jobs\nphp artisan batch:manage list\n\n# Filter by status\nphp artisan batch:manage list --status=running\n\n# Show batch details\nphp artisan batch:manage status --id=123\n\n# Cancel running batch\nphp artisan batch:manage cancel --id=123\n\n# Clean old completed batches\nphp artisan batch:manage cleanup --days=7\n</code></pre> <p>Actions: - <code>list</code>: Display batch jobs - <code>status</code>: Show detailed batch information - <code>cancel</code>: Stop a running batch - <code>cleanup</code>: Remove old batch records</p>"},{"location":"cli/#database-operations","title":"Database Operations","text":""},{"location":"cli/#safe-database-migrations","title":"Safe Database Migrations","text":"<p>Command: <code>migrate:safe</code></p> <p>Runs database migrations with distributed locking to prevent conflicts in multi-server deployments.</p> <pre><code># Run migrations safely\nphp artisan migrate:safe\n\n# Force in production\nphp artisan migrate:safe --force\n\n# Include seeders\nphp artisan migrate:safe --force --seed\n\n# Custom lock timeout\nphp artisan migrate:safe --lock-timeout=600\n</code></pre>"},{"location":"cli/#testing-and-diagnostics","title":"Testing and Diagnostics","text":""},{"location":"cli/#test-infrastructure-services","title":"Test Infrastructure Services","text":"<p>Command: <code>test:infrastructure</code></p> <p>Verifies all external services are properly configured and accessible (database, Redis, S3, Meilisearch).</p> <pre><code>php artisan test:infrastructure\n</code></pre>"},{"location":"cli/#diagnose-file-processing","title":"Diagnose File Processing","text":"<p>Command: <code>diagnose:file-processing</code></p> <p>Analyzes the file processing pipeline to identify configuration issues or bottlenecks.</p> <pre><code># Check user's processing setup\nphp artisan diagnose:file-processing --user-id=42\n\n# Test with sample file\nphp artisan diagnose:file-processing --test-file=storage/app/test.pdf\n</code></pre>"},{"location":"cli/#test-file-processing-pipeline","title":"Test File Processing Pipeline","text":"<p>Command: <code>test:file-processing</code></p> <p>Runs an end-to-end test of file processing with real or mocked services.</p> <pre><code># Test with real services\nphp artisan test:file-processing --user-id=42\n\n# Test with mocked external services\nphp artisan test:file-processing --user-id=42 --mock-services\n</code></pre>"},{"location":"cli/#simple-processing-test","title":"Simple Processing Test","text":"<p>Command: <code>test:file-simple</code></p> <p>Performs a basic file processing test to verify core functionality.</p> <pre><code>php artisan test:file-simple --user-id=42\n</code></pre>"},{"location":"cli/#ai-service-management","title":"AI Service Management","text":""},{"location":"cli/#test-ai-providers","title":"Test AI Providers","text":"<p>Command: <code>ai:test</code></p> <p>Validates AI service configuration and tests processing capabilities.</p> <pre><code># Test receipt extraction\nphp artisan ai:test openai --receipt\n\n# Test document analysis\nphp artisan ai:test openai --document\n</code></pre>"},{"location":"cli/#validate-ai-output","title":"Validate AI Output","text":"<p>Command: <code>ai:test-validation</code></p> <p>Checks AI response formatting and data extraction accuracy.</p> <pre><code>php artisan ai:test-validation --type=receipt --sample=storage/app/sample.txt\n</code></pre>"},{"location":"cli/#manage-ai-prompts","title":"Manage AI Prompts","text":"<p>Command: <code>prompts:manage</code></p> <p>Creates and maintains AI prompt templates for different processing scenarios.</p> <pre><code># List all prompts\nphp artisan prompts:manage list\n\n# Create new prompt (interactive)\nphp artisan prompts:manage create\n\n# Create with parameters\nphp artisan prompts:manage create --name=\"Receipt Extract\" --type=receipt\n\n# Validate all prompts\nphp artisan prompts:manage validate\n</code></pre>"},{"location":"cli/#debug-utilities","title":"Debug Utilities","text":""},{"location":"cli/#test-logging-system","title":"Test Logging System","text":"<p>Command: <code>debug:test-logging</code></p> <p>Verifies logging configuration for debugging AI processing issues.</p> <pre><code>php artisan debug:test-logging\n</code></pre>"},{"location":"cli/#command-tips","title":"Command Tips","text":"<ol> <li>Use <code>--dry-run</code> when available to preview changes before execution</li> <li>Check logs in <code>storage/logs/laravel.log</code> for detailed error information</li> <li>Run <code>queue:health</code> regularly to monitor background job processing</li> <li>Use <code>--help</code> on any command for detailed usage information</li> <li>Schedule maintenance commands using Laravel's task scheduler for automation</li> </ol>"},{"location":"developer/","title":"Developer Guide","text":"<p>This guide covers development practices, code organization, and how to extend Paperpulse functionality.</p>"},{"location":"developer/#code-organization","title":"Code Organization","text":""},{"location":"developer/#directory-structure","title":"Directory Structure","text":"<pre><code>paperpulse/\n\u251c\u2500\u2500 app/                    # Application code\n\u2502   \u251c\u2500\u2500 Console/           # Console commands\n\u2502   \u251c\u2500\u2500 Http/              # Controllers, middleware, requests\n\u2502   \u251c\u2500\u2500 Jobs/              # Background jobs\n\u2502   \u251c\u2500\u2500 Models/            # Eloquent models\n\u2502   \u251c\u2500\u2500 Services/          # Business logic services\n\u2502   \u2514\u2500\u2500 Traits/            # Reusable traits\n\u251c\u2500\u2500 database/              # Database files\n\u2502   \u251c\u2500\u2500 migrations/        # Schema migrations\n\u2502   \u2514\u2500\u2500 seeders/           # Data seeders\n\u251c\u2500\u2500 resources/             # Frontend resources\n\u2502   \u251c\u2500\u2500 js/               # Vue components and JavaScript\n\u2502   \u2514\u2500\u2500 views/            # Blade templates\n\u251c\u2500\u2500 routes/               # Route definitions\n\u251c\u2500\u2500 storage/              # Storage directory\n\u2514\u2500\u2500 tests/                # Test files\n</code></pre>"},{"location":"developer/#key-design-patterns","title":"Key Design Patterns","text":"<p>Service Layer Pattern Business logic is encapsulated in service classes under <code>app/Services/</code>. Controllers remain thin, delegating complex operations to services.</p> <p>Repository Pattern  Data access logic is abstracted when needed, though Eloquent models handle most database interactions directly.</p> <p>Job Pattern Long-running processes are handled by queued jobs to maintain application responsiveness.</p>"},{"location":"developer/#core-concepts","title":"Core Concepts","text":""},{"location":"developer/#user-scoping-with-belongstouser-trait","title":"User Scoping with BelongsToUser Trait","text":"<p>All user-owned models must use the <code>BelongsToUser</code> trait for automatic scoping:</p> <pre><code>class Receipt extends Model\n{\n    use BelongsToUser;\n\n    // Automatically scoped to authenticated user\n}\n</code></pre> <p>This trait: - Adds global scope filtering by user_id - Prevents cross-user data access - Automatically sets user_id on creation</p>"},{"location":"developer/#file-processing-pipeline","title":"File Processing Pipeline","text":"<ol> <li>Upload Handler receives file and creates <code>UploadedFile</code> record</li> <li>ProcessFileJob queued for asynchronous processing</li> <li>FileProcessor service orchestrates:</li> <li>Storage service saves file to S3/local</li> <li>OCR service extracts text</li> <li>AI service analyzes content</li> <li>Data service stores results</li> <li>IndexingJob updates search indexes</li> <li>NotificationJob alerts user of completion</li> </ol>"},{"location":"developer/#ai-service-abstraction","title":"AI Service Abstraction","text":"<p>Never use AI providers directly. Always use the AIService factory:</p> <pre><code>$aiService = app(AIService::class);\n$result = $aiService-&gt;processReceipt($text);\n</code></pre> <p>This abstraction allows switching providers without code changes.</p>"},{"location":"developer/#development-workflow","title":"Development Workflow","text":""},{"location":"developer/#setting-up-development-environment","title":"Setting Up Development Environment","text":"<ol> <li>Fork and clone the repository</li> <li>Create feature branch from <code>main</code></li> <li>Install dependencies and configure <code>.env</code></li> <li>Run tests to verify setup</li> <li>Make changes with tests</li> <li>Submit pull request</li> </ol>"},{"location":"developer/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\nphp artisan test\n\n# Run specific test suite\nphp artisan test --testsuite=Feature\n\n# Run with coverage\nphp artisan test --coverage\n</code></pre>"},{"location":"developer/#code-style","title":"Code Style","text":"<p>Follow PSR-12 coding standards. Use the provided formatter:</p> <pre><code>./vendor/bin/pint\n</code></pre> <p>Static analysis with PHPStan:</p> <pre><code>./vendor/bin/phpstan analyse\n</code></pre>"},{"location":"developer/#extending-functionality","title":"Extending Functionality","text":""},{"location":"developer/#adding-new-file-types","title":"Adding New File Types","text":"<ol> <li>Create processor class implementing <code>FileProcessorInterface</code></li> <li>Register in <code>FileProcessorFactory</code></li> <li>Add MIME type mapping</li> <li>Create tests</li> </ol>"},{"location":"developer/#creating-custom-ai-providers","title":"Creating Custom AI Providers","text":"<ol> <li>Implement <code>AIProviderInterface</code></li> <li>Add configuration to <code>config/ai.php</code></li> <li>Register in <code>AIServiceProvider</code></li> <li>Add environment variables</li> </ol>"},{"location":"developer/#adding-console-commands","title":"Adding Console Commands","text":"<ol> <li>Generate command: <code>php artisan make:command CommandName</code></li> <li>Implement logic in <code>handle()</code> method</li> <li>Add to <code>app/Console/Kernel.php</code> if needed</li> <li>Document in <code>docs/cli.md</code></li> </ol>"},{"location":"developer/#frontend-development","title":"Frontend Development","text":""},{"location":"developer/#vuejs-components","title":"Vue.js Components","text":"<p>Components live in <code>resources/js/Components/</code>. Follow conventions:</p> <ul> <li>Use Composition API for new components</li> <li>Implement proper TypeScript types</li> <li>Use Tailwind CSS for styling</li> <li>Follow single-file component structure</li> </ul>"},{"location":"developer/#inertiajs-pages","title":"Inertia.js Pages","text":"<p>Page components in <code>resources/js/Pages/</code> map to routes:</p> <pre><code>return Inertia::render('Receipts/Index', [\n    'receipts' =&gt; $receipts\n]);\n</code></pre>"},{"location":"developer/#building-assets","title":"Building Assets","text":"<p>Development build with hot reload: <pre><code>npm run dev\n</code></pre></p> <p>Production build: <pre><code>npm run build\n</code></pre></p>"},{"location":"developer/#api-development","title":"API Development","text":""},{"location":"developer/#creating-api-endpoints","title":"Creating API Endpoints","text":"<ol> <li>Add route in <code>routes/api.php</code></li> <li>Create controller in <code>app/Http/Controllers/Api/</code></li> <li>Use API resources for responses</li> <li>Add authentication middleware</li> <li>Document endpoint</li> </ol>"},{"location":"developer/#api-authentication","title":"API Authentication","text":"<p>API uses Sanctum for token authentication:</p> <pre><code>Route::middleware('auth:sanctum')-&gt;group(function () {\n    Route::get('/user', [UserController::class, 'show']);\n});\n</code></pre>"},{"location":"developer/#database-management","title":"Database Management","text":""},{"location":"developer/#creating-migrations","title":"Creating Migrations","text":"<pre><code>php artisan make:migration create_table_name\n</code></pre> <p>Always include: - Proper indexes for query performance - Foreign key constraints - Soft deletes where appropriate</p>"},{"location":"developer/#seeding-data","title":"Seeding Data","text":"<p>Create seeders for test data:</p> <pre><code>php artisan make:seeder NameSeeder\n</code></pre> <p>Run specific seeder: <pre><code>php artisan db:seed --class=NameSeeder\n</code></pre></p>"},{"location":"developer/#performance-considerations","title":"Performance Considerations","text":""},{"location":"developer/#query-optimization","title":"Query Optimization","text":"<ul> <li>Use eager loading to prevent N+1 queries</li> <li>Add database indexes for frequent queries</li> <li>Use query scopes for reusable filters</li> <li>Cache expensive queries with Redis</li> </ul>"},{"location":"developer/#job-optimization","title":"Job Optimization","text":"<ul> <li>Chunk large datasets in jobs</li> <li>Use job batching for bulk operations</li> <li>Implement job timeouts</li> <li>Add retry logic with exponential backoff</li> </ul>"},{"location":"developer/#storage-optimization","title":"Storage Optimization","text":"<ul> <li>Store files with GUID names</li> <li>Use appropriate storage disks</li> <li>Implement file cleanup jobs</li> <li>Compress large files before storage</li> </ul>"},{"location":"developer/#security-best-practices","title":"Security Best Practices","text":""},{"location":"developer/#data-protection","title":"Data Protection","text":"<ul> <li>Never expose user IDs in URLs</li> <li>Use UUIDs for public identifiers</li> <li>Sanitize all user input</li> <li>Implement rate limiting</li> </ul>"},{"location":"developer/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>Use Laravel policies for authorization</li> <li>Implement 2FA for admin accounts</li> <li>Rotate API keys regularly</li> <li>Log authentication events</li> </ul>"},{"location":"developer/#file-handling","title":"File Handling","text":"<ul> <li>Validate file types and sizes</li> <li>Scan uploads for malware</li> <li>Store files outside public directory</li> <li>Use signed URLs for temporary access</li> </ul>"},{"location":"developer/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"developer/#logging","title":"Logging","text":"<p>Use Laravel's logging facade:</p> <pre><code>Log::info('Processing file', ['file_id' =&gt; $file-&gt;id]);\n</code></pre>"},{"location":"developer/#debugging-tools","title":"Debugging Tools","text":"<ul> <li>Laravel Telescope for local debugging</li> <li>Laravel Debugbar for query analysis</li> <li>Xdebug for step debugging</li> </ul>"},{"location":"developer/#performance-monitoring","title":"Performance Monitoring","text":"<ul> <li>Monitor queue depths</li> <li>Track job processing times</li> <li>Alert on high failure rates</li> <li>Log slow queries</li> </ul>"},{"location":"developer/#documentation","title":"Documentation","text":""},{"location":"developer/#building-documentation","title":"Building Documentation","text":"<p>Paperpulse documentation uses MkDocs with the Material theme. We use Docker to avoid installing dependencies locally.</p>"},{"location":"developer/#using-docker-recommended","title":"Using Docker (Recommended)","text":"<p>All documentation tasks can be run using the official MkDocs Material Docker image.</p>"},{"location":"developer/#build-documentation","title":"Build Documentation","text":"<p>Build the static documentation site:</p> <pre><code>docker run --rm -v \"${PWD}:/docs\" squidfunk/mkdocs-material build\n</code></pre> <p>This generates files in <code>public/docs/</code> which are served at <code>/docs</code> by Laravel.</p>"},{"location":"developer/#live-preview-with-hot-reload","title":"Live Preview with Hot Reload","text":"<p>Start the development server with automatic rebuild on changes:</p> <pre><code>docker run --rm -it -p 8000:8000 -v \"${PWD}:/docs\" squidfunk/mkdocs-material\n</code></pre> <p>Access at <code>http://localhost:8000</code>. The server watches for changes and rebuilds automatically.</p>"},{"location":"developer/#create-new-documentation-project","title":"Create New Documentation Project","text":"<p>If starting fresh:</p> <pre><code>docker run --rm -it -v \"${PWD}:/docs\" squidfunk/mkdocs-material new .\n</code></pre>"},{"location":"developer/#additional-docker-commands","title":"Additional Docker Commands","text":"<p>Get help on available commands:</p> <pre><code>docker run --rm -it -v \"${PWD}:/docs\" squidfunk/mkdocs-material --help\n</code></pre> <p>Build with verbose output:</p> <pre><code>docker run --rm -v \"${PWD}:/docs\" squidfunk/mkdocs-material build --verbose\n</code></pre> <p>Build with strict mode (fails on warnings):</p> <pre><code>docker run --rm -v \"${PWD}:/docs\" squidfunk/mkdocs-material build --strict\n</code></pre> <p>Serve on a different port:</p> <pre><code>docker run --rm -it -p 8001:8000 -v \"${PWD}:/docs\" squidfunk/mkdocs-material serve --dev-addr=0.0.0.0:8000\n</code></pre>"},{"location":"developer/#alternative-local-installation","title":"Alternative: Local Installation","text":"<p>If you prefer local installation:</p> <pre><code># Using Homebrew on macOS\nbrew install mkdocs\npipx install mkdocs-material\n\n# Or using pip in a virtual environment\npython3 -m venv venv\nsource venv/bin/activate\npip install mkdocs-material\n</code></pre> <p>Then use standard MkDocs commands:</p> <pre><code>mkdocs build      # Build documentation\nmkdocs serve      # Live preview\n</code></pre>"},{"location":"developer/#documentation-structure","title":"Documentation Structure","text":"<ul> <li><code>mkdocs.yml</code> - Configuration file with Material theme settings</li> <li><code>docs/</code> - Markdown source files</li> <li><code>public/docs/</code> - Built HTML output (git-ignored)</li> <li><code>docs/assets/</code> - Images and other static files</li> </ul>"},{"location":"developer/#material-theme-features","title":"Material Theme Features","text":"<p>The Material theme provides:</p> <ul> <li>Dark/Light Mode Toggle - Automatic theme switching</li> <li>Search - Built-in search with highlighting</li> <li>Navigation - Tabs, sections, and breadcrumbs</li> <li>Code Blocks - Syntax highlighting with copy button</li> <li>Admonitions - Note, warning, and info boxes</li> <li>Mobile Responsive - Optimized for all devices</li> </ul>"},{"location":"developer/#writing-documentation","title":"Writing Documentation","text":""},{"location":"developer/#admonitions","title":"Admonitions","text":"<p>Use admonitions for important information:</p> <pre><code>!!! note \"Important Note\"\n    This is a note with a custom title.\n\n!!! warning\n    This is a warning without a custom title.\n\n!!! tip\n    This is a helpful tip.\n\n!!! danger\n    This indicates danger or destructive actions.\n</code></pre>"},{"location":"developer/#code-blocks","title":"Code Blocks","text":"<p>Add syntax highlighting and line numbers:</p> <p><pre><code>``` php linenums=\"1\"\nclass Receipt extends Model\n{\n    use BelongsToUser;\n}\n</code></pre> <pre><code>##### Tabs\n\nGroup related content:\n\n```markdown\n=== \"PHP\"\n\n    ``` php\n    $user = User::find(1);\n    ```\n\n=== \"JavaScript\"\n\n    ``` javascript\n    const user = await api.getUser(1);\n    ```\n</code></pre></p>"},{"location":"developer/#task-lists","title":"Task Lists","text":"<pre><code>- [x] Completed task\n- [ ] Pending task\n- [ ] Another pending task\n</code></pre>"},{"location":"developer/#documentation-best-practices","title":"Documentation Best Practices","text":"<ol> <li>Keep it Current - Update docs with every feature change</li> <li>Use Examples - Include real-world code examples</li> <li>Add Context - Explain why, not just how</li> <li>Test Commands - Verify all commands work as documented</li> <li>Use Visuals - Add diagrams for complex concepts</li> <li>Cross-Reference - Link between related topics</li> <li>Version Notes - Document version-specific features</li> </ol>"},{"location":"developer/#deployment","title":"Deployment","text":""},{"location":"developer/#production-checklist","title":"Production Checklist","text":"<ul> <li>Set <code>APP_ENV=production</code></li> <li>Set <code>APP_DEBUG=false</code></li> <li>Configure proper database</li> <li>Set up Redis cluster</li> <li>Configure S3 storage</li> <li>Set up queue workers</li> <li>Configure SSL certificates</li> <li>Set up monitoring</li> <li>Configure backups</li> </ul>"},{"location":"developer/#environment-variables","title":"Environment Variables","text":"<p>Critical production variables:</p> <pre><code>APP_ENV=production\nAPP_DEBUG=false\nAPP_URL=https://paperpulse.test\n\nDB_CONNECTION=pgsql\nQUEUE_CONNECTION=redis\nCACHE_DRIVER=redis\nSESSION_DRIVER=redis\n\nFILESYSTEM_DISK=s3\n</code></pre>"},{"location":"developer/#queue-worker-configuration","title":"Queue Worker Configuration","text":"<p>Supervisor configuration for queue workers:</p> <pre><code>[program:paperpulse-worker]\nprocess_name=%(program_name)s_%(process_num)02d\ncommand=php /path/to/artisan queue:work redis --sleep=3 --tries=3\nautostart=true\nautorestart=true\nnumprocs=8\nredirect_stderr=true\nstdout_logfile=/path/to/worker.log\n</code></pre>"},{"location":"developer/#troubleshooting-development","title":"Troubleshooting Development","text":""},{"location":"developer/#common-issues","title":"Common Issues","text":"<p>Composer dependency conflicts <pre><code>composer update --with-dependencies\n</code></pre></p> <p>NPM build failures <pre><code>rm -rf node_modules package-lock.json\nnpm install\n</code></pre></p> <p>Migration rollback issues <pre><code>php artisan migrate:fresh --seed\n</code></pre></p> <p>Cache problems <pre><code>php artisan cache:clear\nphp artisan config:clear\nphp artisan route:clear\n</code></pre></p>"},{"location":"developer/#contributing","title":"Contributing","text":""},{"location":"developer/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create feature branch</li> <li>Write tests for new features</li> <li>Ensure all tests pass</li> <li>Update documentation</li> <li>Submit PR with clear description</li> <li>Address review feedback</li> </ol>"},{"location":"developer/#code-review-criteria","title":"Code Review Criteria","text":"<ul> <li>Follows coding standards</li> <li>Includes appropriate tests</li> <li>Updates documentation</li> <li>Maintains backward compatibility</li> <li>Implements proper error handling</li> <li>Uses existing patterns</li> </ul>"},{"location":"developer/#commit-messages","title":"Commit Messages","text":"<p>Follow conventional commits: - <code>feat:</code> New feature - <code>fix:</code> Bug fix - <code>docs:</code> Documentation - <code>style:</code> Formatting - <code>refactor:</code> Code restructuring - <code>test:</code> Test additions - <code>chore:</code> Maintenance</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide walks through setting up Paperpulse for local development, explaining each component and its role in the system.</p>"},{"location":"getting-started/#system-requirements","title":"System Requirements","text":"<p>Before installing Paperpulse, ensure your development environment meets these requirements:</p> <ul> <li>PHP 8.2+ with extensions: BCMath, Ctype, JSON, Mbstring, OpenSSL, PDO, Tokenizer, XML</li> <li>Composer for managing PHP dependencies</li> <li>Node.js 18+ and npm for building the Vue.js frontend</li> <li>PostgreSQL 14+, MySQL 8.0+, or SQLite for data storage</li> <li>Redis 6.0+ for queue management and caching</li> <li>Meilisearch 1.0+ for full-text search capabilities</li> <li>Optional: AWS S3 or compatible object storage for cloud file storage</li> </ul>"},{"location":"getting-started/#understanding-the-architecture","title":"Understanding the Architecture","text":""},{"location":"getting-started/#core-services","title":"Core Services","text":"<p>Redis - The Message Broker Redis acts as the central nervous system for background processing. When users upload files, the main application quickly stores them and creates a \"job\" in Redis. Worker processes monitor Redis for new jobs and process files asynchronously, ensuring the web interface remains responsive even during heavy processing loads.</p> <p>Meilisearch - Search Engine Meilisearch provides lightning-fast full-text search across all documents. When documents are processed, their content and metadata are indexed in Meilisearch, allowing users to find documents instantly by searching for any text within them.</p> <p>Laravel Queues - Background Processing The queue system handles all heavy lifting in the background: - File processing and OCR extraction - AI analysis for data extraction - Image thumbnail generation - Email notifications - Cleanup tasks</p>"},{"location":"getting-started/#installation-process","title":"Installation Process","text":""},{"location":"getting-started/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/pondi/paperpulse.git\ncd paperpulse\n</code></pre> <p>This creates your local development copy of the Paperpulse codebase.</p>"},{"location":"getting-started/#2-install-php-dependencies","title":"2. Install PHP Dependencies","text":"<pre><code>composer install\n</code></pre> <p>Composer reads the <code>composer.json</code> file and installs all PHP packages required by Laravel and Paperpulse. This includes the Laravel framework, database drivers, queue libraries, and third-party integrations.</p>"},{"location":"getting-started/#3-install-frontend-dependencies","title":"3. Install Frontend Dependencies","text":"<pre><code>npm install\n</code></pre> <p>NPM installs Vue.js, Inertia.js, and all JavaScript libraries needed for the user interface. These packages enable the reactive, single-page application experience.</p>"},{"location":"getting-started/#4-configure-your-environment","title":"4. Configure Your Environment","text":"<pre><code>cp .env.example .env\n</code></pre> <p>The <code>.env</code> file contains all configuration settings. This file is never committed to version control as it contains sensitive information. Key settings to configure:</p>"},{"location":"getting-started/#database-configuration","title":"Database Configuration","text":"<pre><code>DB_CONNECTION=pgsql\nDB_HOST=127.0.0.1\nDB_PORT=5432\nDB_DATABASE=paperpulse\nDB_USERNAME=your_db_user\nDB_PASSWORD=your_db_password\n</code></pre> <p>The database stores all application data including users, documents, extracted data, and system configuration. PostgreSQL is recommended for production use.</p>"},{"location":"getting-started/#redis-configuration","title":"Redis Configuration","text":"<pre><code>REDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\nREDIS_CLIENT=phpredis\n</code></pre> <p>Redis must be running for the application to function properly. It manages: - Background job queues - Application cache - Session storage (optional) - Real-time broadcasting (if enabled)</p>"},{"location":"getting-started/#queue-configuration","title":"Queue Configuration","text":"<pre><code>QUEUE_CONNECTION=redis\n</code></pre> <p>This tells Laravel to use Redis for queue management. Jobs are pushed to Redis and processed by worker processes.</p>"},{"location":"getting-started/#storage-configuration","title":"Storage Configuration","text":"<pre><code>FILESYSTEM_DISK=local\n</code></pre> <p>For production, use S3: <pre><code>FILESYSTEM_DISK=s3\nAWS_ACCESS_KEY_ID=your-access-key-id\nAWS_SECRET_ACCESS_KEY=your-secret-access-key\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=paperpulse-storage\n</code></pre></p> <p>Files are stored with generated GUIDs to prevent naming conflicts and improve security.</p>"},{"location":"getting-started/#search-configuration","title":"Search Configuration","text":"<pre><code>SCOUT_DRIVER=meilisearch\nMEILISEARCH_HOST=http://127.0.0.1:7700\nMEILISEARCH_KEY=masterKey\n</code></pre> <p>Meilisearch must be running and accessible. The master key secures admin operations.</p>"},{"location":"getting-started/#5-generate-application-key","title":"5. Generate Application Key","text":"<pre><code>php artisan key:generate\n</code></pre> <p>This command generates a unique encryption key for your application. Laravel uses this key to encrypt sessions, cookies, and other sensitive data. The key is automatically added to your <code>.env</code> file. Never share this key or commit it to version control.</p>"},{"location":"getting-started/#6-initialize-the-database","title":"6. Initialize the Database","text":"<pre><code>php artisan migrate\n</code></pre> <p>Migrations create all database tables and relationships. This command: - Creates user tables for authentication - Sets up document and receipt storage tables - Creates tables for jobs and failed jobs - Establishes indexes for performance - Sets up relationship constraints</p> <p>Each migration is versioned and tracked, allowing you to roll back changes if needed.</p>"},{"location":"getting-started/#7-optional-load-sample-data","title":"7. Optional: Load Sample Data","text":"<pre><code>php artisan db:seed\n</code></pre> <p>Seeders populate the database with sample data for testing. This typically includes: - Test user accounts - Sample documents and receipts - Configuration data - Demo file shares</p>"},{"location":"getting-started/#8-build-frontend-assets","title":"8. Build Frontend Assets","text":"<pre><code>npm run build\n</code></pre> <p>This command compiles and optimizes all frontend code: - Transpiles modern JavaScript for browser compatibility - Compiles Vue.js components - Processes CSS with PostCSS - Minifies code for production - Generates source maps for debugging</p> <p>For active development with automatic recompilation: <pre><code>npm run dev\n</code></pre></p> <p>This starts a development server that watches for file changes and automatically rebuilds assets, enabling hot module replacement for instant updates.</p>"},{"location":"getting-started/#running-the-application","title":"Running the Application","text":""},{"location":"getting-started/#start-the-web-server","title":"Start the Web Server","text":"<pre><code>php artisan serve\n</code></pre> <p>This starts PHP's built-in development server on <code>http://localhost:8000</code>. The server: - Handles HTTP requests - Routes to appropriate controllers - Serves static assets - Manages sessions</p>"},{"location":"getting-started/#start-the-queue-worker","title":"Start the Queue Worker","text":"<p>In a new terminal window: <pre><code>php artisan queue:work\n</code></pre></p> <p>The queue worker is essential for file processing. It: - Monitors Redis for new jobs - Processes uploaded files through OCR - Calls AI services for data extraction - Updates search indexes - Handles email notifications</p> <p>Without the queue worker running, uploaded files will not be processed.</p>"},{"location":"getting-started/#start-the-task-scheduler","title":"Start the Task Scheduler","text":"<p>In another terminal window: <pre><code>php artisan schedule:work\n</code></pre></p> <p>The scheduler runs periodic maintenance tasks: - Cleans up expired file shares - Removes old temporary files - Updates search indexes - Sends digest emails - Performs system health checks</p>"},{"location":"getting-started/#service-setup-details","title":"Service Setup Details","text":""},{"location":"getting-started/#setting-up-meilisearch","title":"Setting Up Meilisearch","text":"<ol> <li>Install Meilisearch following their official documentation</li> <li>Start the service with a master key for security</li> <li>Create indexes by running:    <pre><code>php artisan scout:reindex-all\n</code></pre>    This creates search indexes for all document types</li> </ol> <p>Meilisearch provides: - Typo tolerance (finds \"recipt\" when searching \"receipt\") - Instant search-as-you-type results - Faceted search for filtering - Relevancy ranking</p>"},{"location":"getting-started/#setting-up-redis","title":"Setting Up Redis","text":"<ol> <li>Install Redis via your package manager</li> <li>Start Redis service:    <pre><code>redis-server\n</code></pre></li> <li>Verify connection:    <pre><code>redis-cli ping\n</code></pre>    Should return <code>PONG</code></li> </ol> <p>Redis stores jobs in lists and provides atomic operations for reliable job processing.</p>"},{"location":"getting-started/#understanding-laravel-jobs","title":"Understanding Laravel Jobs","text":"<p>When a file is uploaded:</p> <ol> <li>Job Creation: A job is created with file details and queued in Redis</li> <li>Worker Processing: An idle worker picks up the job</li> <li>File Processing: The worker:</li> <li>Downloads the file from storage</li> <li>Extracts text via OCR</li> <li>Sends text to AI for analysis</li> <li>Stores extracted data</li> <li>Indexes content in Meilisearch</li> <li>Completion: Job is marked complete and removed from queue</li> </ol> <p>Failed jobs are moved to a failed jobs table for debugging and retry.</p>"},{"location":"getting-started/#verifying-your-setup","title":"Verifying Your Setup","text":""},{"location":"getting-started/#test-infrastructure-connectivity","title":"Test Infrastructure Connectivity","text":"<pre><code>php artisan test:infrastructure\n</code></pre> <p>This command verifies: - Database connection and permissions - Redis availability and configuration - S3 bucket access (if configured) - Meilisearch connectivity - Mail configuration</p>"},{"location":"getting-started/#test-file-processing","title":"Test File Processing","text":"<pre><code>php artisan test:file-simple --user-id=1\n</code></pre> <p>This creates a test file and processes it through the entire pipeline, verifying: - File upload to storage - Job queue creation - OCR processing - AI integration - Search indexing</p>"},{"location":"getting-started/#monitor-queue-health","title":"Monitor Queue Health","text":"<pre><code>php artisan queue:health\n</code></pre> <p>Shows current queue status: - Number of pending jobs - Processing rate - Failed job count - Worker status</p>"},{"location":"getting-started/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"getting-started/#queue-jobs-not-processing","title":"Queue Jobs Not Processing","text":"<p>Problem: Files upload but never get processed</p> <p>Solution: Ensure the queue worker is running: <pre><code>php artisan queue:work --verbose\n</code></pre></p> <p>The <code>--verbose</code> flag shows detailed processing information.</p>"},{"location":"getting-started/#search-not-working","title":"Search Not Working","text":"<p>Problem: Documents aren't searchable after processing</p> <p>Solution: Rebuild search indexes: <pre><code>php artisan scout:reindex-all --fresh\n</code></pre></p> <p>This deletes and recreates all indexes with current data.</p>"},{"location":"getting-started/#storage-permission-errors","title":"Storage Permission Errors","text":"<p>Problem: Cannot write to storage directories</p> <p>Solution: Fix directory permissions: <pre><code>chmod -R 775 storage bootstrap/cache\n</code></pre></p> <p>Laravel needs write access to store logs, cache, and temporary files.</p>"},{"location":"getting-started/#database-connection-failed","title":"Database Connection Failed","text":"<p>Problem: Cannot connect to database</p> <p>Solution:  1. Verify database service is running 2. Check credentials in <code>.env</code> 3. Ensure database exists 4. Test connection: <code>php artisan tinker</code> then <code>DB::connection()-&gt;getPdo();</code></p>"},{"location":"getting-started/#memory-errors-during-processing","title":"Memory Errors During Processing","text":"<p>Problem: Large files cause out-of-memory errors</p> <p>Solution: Increase PHP memory limit in <code>php.ini</code>: <pre><code>memory_limit = 256M\n</code></pre></p> <p>Or configure queue workers with limited memory: <pre><code>php artisan queue:work --memory=128\n</code></pre></p>"},{"location":"pulsedav/","title":"Pulsedav: WebDAV Upload Gateway","text":"<p>Pulsedav is a small Go-based WebDAV server used to receive file uploads and place them into S3 where Paperpulse picks them up. This page explains how it authenticates, where files are stored, which WebDAV operations are supported, and how to plug it into the app.</p> <ul> <li>Storage: S3 under <code>incoming/{userID}/{filename}</code></li> <li>Auth: either via the Laravel API (recommended) or local env-based credentials</li> <li>Methods: <code>OPTIONS</code>, <code>PROPFIND</code> (depth 0/1), and <code>PUT</code></li> </ul>"},{"location":"pulsedav/#storage-layout","title":"Storage layout","text":"<p>Files land in your S3 bucket like this:</p> <pre><code>s3://{S3_BUCKET}/incoming/{userID}/{filename}\n</code></pre> <ul> <li><code>userID</code> comes from authentication (see below)</li> <li>Filenames are sanitized; paths are flat per user (no subdirectories)</li> </ul> <p>Example tree: <pre><code>paperpulse-storage/\n\u2514\u2500\u2500 incoming/\n    \u251c\u2500\u2500 123/\n    \u2502   \u251c\u2500\u2500 receipt.pdf\n    \u2502   \u2514\u2500\u2500 image.jpg\n    \u2514\u2500\u2500 456/\n        \u2514\u2500\u2500 report.docx\n</code></pre></p>"},{"location":"pulsedav/#authentication-modes","title":"Authentication modes","text":""},{"location":"pulsedav/#api-authentication-recommended","title":"API authentication (recommended)","text":"<p>Pulsedav calls your Laravel API to verify credentials and to resolve a stable <code>user_id</code>.</p> <p>Request: <pre><code>POST {API_AUTH_URL}\nContent-Type: application/json\nAuthorization: Basic base64(username:password)\n\n{\n  \"username\": \"user@example.com\",\n  \"password\": \"secret\"\n}\n</code></pre></p> <p>Expected JSON response: <pre><code>{\n  \"user_id\": 123,\n  \"username\": \"user@example.com\"\n}\n</code></pre></p> <p>Notes: - <code>user_id</code> is used to build the S3 path; keep it stable per user - Respond with proper JSON and content-type</p>"},{"location":"pulsedav/#local-authentication","title":"Local authentication","text":"<p>If API auth is disabled, Pulsedav matches credentials from env and uses a fixed <code>LOCAL_AUTH_USER_ID</code>.</p> <p>Env keys: - <code>LOCAL_AUTH_USERNAME</code> - <code>LOCAL_AUTH_PASSWORD</code> - <code>LOCAL_AUTH_USER_ID</code> (defaults to <code>1</code> if absent)</p>"},{"location":"pulsedav/#supported-webdav-operations","title":"Supported WebDAV operations","text":"<ul> <li><code>OPTIONS</code> \u2014 advertise capabilities</li> <li><code>PROPFIND</code> \u2014 list files (depth 0 or 1)</li> <li><code>PUT</code> \u2014 upload a file</li> </ul> <p>Example upload: <pre><code>PUT /receipt.pdf HTTP/1.1\nHost: webdav.example.com\nAuthorization: Basic dXNlcjpwYXNzd29yZA==\nContent-Type: application/pdf\nContent-Length: 102400\n\n[binary]\n</code></pre></p>"},{"location":"pulsedav/#validation-and-limits","title":"Validation and limits","text":"<ul> <li>Allowed extensions: .txt .pdf .doc .docx .xls .xlsx .jpg .jpeg .png .gif .zip .csv</li> <li>Max file size: 100 MB (Content-Length required)</li> <li>No transfer encodings; path traversal is blocked; filename sanitized</li> </ul>"},{"location":"pulsedav/#logging-and-monitoring","title":"Logging and monitoring","text":"<p>Logs typically go to console and S3 under <code>webdav/{environment}/webdav-server/</code> and include request/audit/error logs.</p> <p>Log entry example: <pre><code>{\n  \"timestamp\": \"2024-01-20T10:30:00Z\",\n  \"level\": \"info\",\n  \"message\": \"File uploaded successfully\",\n  \"trace_id\": \"abc-123\",\n  \"user_id\": \"123\",\n  \"filename\": \"receipt.pdf\",\n  \"size\": 102400\n}\n</code></pre></p>"},{"location":"pulsedav/#laravel-api-integration","title":"Laravel API integration","text":""},{"location":"pulsedav/#1-auth-endpoint","title":"1) Auth endpoint","text":"<p>Provide an endpoint that verifies Basic Auth credentials and returns <code>user_id</code> and <code>username</code>.</p> <p>Minimal example (throttled): <pre><code>Route::post('/api/webdav/auth', function (Request $request) {\n    $credentials = [\n        'email' =&gt; $request-&gt;input('username'),\n        'password' =&gt; $request-&gt;input('password'),\n    ];\n\n    if (Auth::attempt($credentials)) {\n        return response()-&gt;json([\n            'user_id' =&gt; Auth::id(),\n            'username' =&gt; Auth::user()-&gt;email,\n        ]);\n    }\n\n    return response()-&gt;json(['error' =&gt; 'Invalid credentials'], 401);\n})-&gt;middleware('throttle:10,1');\n</code></pre></p>"},{"location":"pulsedav/#2-s3-access","title":"2) S3 access","text":"<p>Use the same bucket Pulsedav writes to. Files are under <code>incoming/{userID}/</code>.</p>"},{"location":"pulsedav/#3-processing","title":"3) Processing","text":"<p>Scan a user\u2019s <code>incoming/{userID}/</code> prefix and enqueue work: <pre><code>$files = Storage::disk('s3')-&gt;files(\"incoming/{$userId}\");\nforeach ($files as $file) {\n    ProcessUploadedFile::dispatch($userId, $file);\n}\n</code></pre></p>"},{"location":"pulsedav/#environment-variables","title":"Environment variables","text":"<p>Required: - <code>S3_BUCKET</code> - <code>S3_REGION</code></p> <p>Authentication: - <code>API_AUTH</code> \u2014 <code>true</code> or <code>false</code> - <code>API_AUTH_URL</code> \u2014 endpoint to call when <code>API_AUTH=true</code> - <code>LOCAL_AUTH_USERNAME</code>, <code>LOCAL_AUTH_PASSWORD</code>, <code>LOCAL_AUTH_USER_ID</code> \u2014 when <code>API_AUTH=false</code></p> <p>Optional S3: - <code>S3_ENDPOINT</code>, <code>S3_ACCESS_KEY_ID</code>, <code>S3_SECRET_ACCESS_KEY</code>, <code>S3_USE_PATH_STYLE</code></p>"},{"location":"pulsedav/#api-structure-recap-pulsedav-side","title":"API structure recap (Pulsedav side)","text":"<ul> <li>Inbound WebDAV methods: <code>OPTIONS</code>, <code>PROPFIND</code>, <code>PUT</code></li> <li>Credential check: Basic Auth forwarded to <code>API_AUTH_URL</code> (JSON POST)</li> <li>Upload target: <code>incoming/{user_id}/{filename}</code> in S3</li> <li>Responses: 201 on success for uploads; WebDAV-compliant errors otherwise</li> </ul>"},{"location":"pulsedav/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>No files in S3: verify <code>user_id</code> from API and bucket permissions</li> <li>401 from auth: ensure JSON shape and throttling are correct</li> <li>429 rate limiting: back off and retry</li> <li>Large uploads: confirm size limits and Content-Length</li> </ul>"}]}